#!/usr/bin/env python
################################################################################
#
#      Copyright (C) 2016 juztamau5
#      Software License Agreement (MIT License)
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#      The above copyright notice and this permission notice shall be included
#      in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
################################################################################

import glob
import os
import netifaces
import subprocess

OPENVPN_DIR = '/etc/openvpn'

def replace(lst, token, replacement):
    for index, lstToken in enumerate(lst):
        if lstToken == token:
            lst[index] = replacement

class OpenVPNConfig:
    @staticmethod
    def getClientConfig():
        return os.path.join(OPENVPN_DIR, 'client.template.conf')

    @staticmethod
    def getDhcpScript():
        return os.path.join(OPENVPN_DIR, 'dhcp.sh')

    @staticmethod
    def getCertificateAuthority():
        return os.path.join(OPENVPN_DIR, 'ca.crt')

    @staticmethod
    def getClientCertificate():
        for cert in glob.glob(os.path.join(OPENVPN_DIR, '*.crt')):
            if os.path.basename(cert) is not 'ca.crt':
                return cert
        return None

    @staticmethod
    def getClientKey():
        keys = glob.glob(os.path.join(OPENVPN_DIR, '*.key'))
        if keys:
            return keys[0]
        return None

class OpenVPN:
    def __init__(self, serverIP):
        self._server = serverIP
        self._cmd = None
        self._popen = None

    def connect(self):
        cmd = self.getCommand()

        # Pretty-print command
        print('Launching OpenVPN with command:')
        print(' '.join(cmd).replace(' --', '\n\t--') + '\n')

        self._popen = subprocess.Popen(cmd)

    def getCommand(self):
        if not self._cmd:
            cmd = self.getCommandTemplate()

            # Process variables
            replace(cmd, '$REMOTE_IP', self._server)
            replace(cmd, '$DHCP_SCRIPT', OpenVPNConfig.getDhcpScript())
            replace(cmd, '$CERTIFICATE_AUTHORITY', OpenVPNConfig.getCertificateAuthority())
            replace(cmd, '$CLIENT_CERTIFICATE', OpenVPNConfig.getClientCertificate())
            replace(cmd, '$CLIENT_KEY', OpenVPNConfig.getClientKey())

            self._cmd = cmd

        return self._cmd

    @staticmethod
    def getCommandTemplate():
        # Build OpenVPN command (arguments will be added to the list)
        openvpnCmd = ['openvpn']

        # Read client config template
        with open(OpenVPNConfig.getClientConfig(), 'r') as f:
            for line in f.readlines():
                line = line.strip()

                # Skip blank lines
                if not line:
                    continue

                # Skip comments
                if line[0] == '#' or line[0] == ';':
                    continue

                # Command line options are preceded by a double-leading-dash
                line = '--' + line

                for token in line.replace('\t', ' ').split(' '):
                    # Skip empty tokens
                    if not token:
                        continue

                    openvpnCmd.append(token)

        return openvpnCmd

def main():

    # Scan network interfaces for gateways
    gateways = [ ]
    niGateways = netifaces.gateways()
    if netifaces.AF_INET in niGateways:
        for gateway in niGateways[netifaces.AF_INET]:
            ipAddress = gateway[0]
            gateways.append(ipAddress)

    # Create OpenVPN instances for the gateways
    instances = []
    for gateway in gateways:
        openVpn = OpenVPN(gateway)
        openVpn.connect()
        instances.append(openVpn)

if __name__ == '__main__':
    main()
