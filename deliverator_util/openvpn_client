#!/usr/bin/env python
################################################################################
#
#      Copyright (C) 2016 juztamau5
#      Software License Agreement (MIT License)
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#      The above copyright notice and this permission notice shall be included
#      in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
################################################################################

import os
import netifaces
import subprocess

OPENVPN_DIR = '/etc/openvpn'

def replace(lst, token, replacement):
    for index, lstToken in enumerate(lst):
        if lstToken == token:
            lst[index] = replacement

def getClientConfig():
    return os.path.join(OPENVPN_DIR, 'client.template.conf')

def getDhcpScript():
    return os.path.join(OPENVPN_DIR, 'dhcp.sh')

def getCertificateAuthority():
    return os.path.join(OPENVPN_DIR, 'ca.crt')

def getClientName():
    return 'client1' # TODO

def getClientCertificate():
    return os.path.join(OPENVPN_DIR, getClientName() + '.crt')

def getClientKey():
    clientName = 'client1' # TODO
    return os.path.join(OPENVPN_DIR, getClientName() + '.key')

def replaceVariables(lst):
    replace(lst, '$DHCP_SCRIPT', getDhcpScript())
    replace(lst, '$CERTIFICATE_AUTHORITY', getCertificateAuthority())
    replace(lst, '$CLIENT_CERTIFICATE', getClientCertificate())
    replace(lst, '$CLIENT_KEY', getClientKey())

def main():
    # Build OpenVPN command (arguments will be added to the list)
    openvpnCmd = ['openvpn']

    # Scan network interfaces for gateways
    gateways = [ ]
    niGateways = netifaces.gateways()
    if netifaces.AF_INET in niGateways:
        for gateway in niGateways[netifaces.AF_INET]:
            gateways.append(gateway[0])

    # Read client config
    with open(getClientConfig(), 'r') as file:
        for line in file.readlines():
            line = line.strip()

            # Skip blank lines
            if not line:
                continue

            # Skip comments
            if line[0] == '#' or line[0] == ';':
                continue

            # Command line options are preceded by a double-leading-dash
            line = '--' + line

            for token in line.replace('\t', ' ').split(' '):
                # Skip empty tokens
                if not token:
                    continue

                openvpnCmd.append(token)

    # Process variables
    replaceVariables(openvpnCmd)

    # Generate one command for each gateway
    openvpnCmds = [ ]
    for gateway in gateways:
        cmd = openvpnCmd[:]
        replace(cmd, '$REMOTE_IP', gateway)
        openvpnCmds.append(cmd)

    # Execute OpenVPN instances
    for cmd in openvpnCmds:
        print('Launching OpenVPN with command:')
        print(' '.join(cmd).replace(' --', '\n\t--') + '\n')
        subprocess.Popen(cmd)

if __name__ == '__main__':
    main()
