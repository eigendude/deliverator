#!/usr/bin/env python
################################################################################
#
#      Copyright (C) 2016 juztamau5
#      Software License Agreement (MIT License)
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#      The above copyright notice and this permission notice shall be included
#      in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
################################################################################

################################################################################
#
#  Add to /etc/rc.local:
#      "<path_to_deliverator_util>/openvpn/client_connect"
#
#  This script enables secure communication with the trusted network running on
#  the master ROS node.
#
#  When run, this script monitors for network interfaces with a valid gateway.
#  To avoid autodiscovery complexity, it is assumed that the DHCP server on the
#  master ROS node reported itself as a gateway.
#
#  This script exits when we receive an IP address on the trusted network. It
#  should be placed in rc.local before any ROS startup scripts.
#
#  For this script to work, the following files must be installed to
#  /etc/openvpn:
#
#     * client.template.conf
#     * dhcp.sh
#     * ca.crt
#     * <client>.crt
#     * <client>.key
#
################################################################################

import glob
import os
import netifaces
import signal
import subprocess
import time

OPENVPN_DIR  = '/etc/openvpn'
OPENVPN_PORT = 1194

# Prefix for tap devices, e.g. 'tap' for tap0, tap1, etc
TAP_NAME_PREFIX = 'tap'

def replace(lst, token, replacement):
    for index, lstToken in enumerate(lst):
        if lstToken == token:
            lst[index] = replacement

class OpenVPNConfig:
    @staticmethod
    def getClientConfig():
        return os.path.join(OPENVPN_DIR, 'client.template.conf')

    @staticmethod
    def getDhcpScript():
        return os.path.join(OPENVPN_DIR, 'dhcp.sh')

    @staticmethod
    def getCertificateAuthority():
        return os.path.join(OPENVPN_DIR, 'ca.crt')

    @staticmethod
    def getClientCertificate():
        for cert in glob.glob(os.path.join(OPENVPN_DIR, '*.crt')):
            if os.path.basename(cert) is not 'ca.crt':
                return cert
        return None

    @staticmethod
    def getClientKey():
        keys = glob.glob(os.path.join(OPENVPN_DIR, '*.key'))
        if keys:
            return keys[0]
        return None

class OpenVPNClient:
    def __init__(self, serverIP, tapInterface):
        self._server = serverIP
        self._tapInterface = tapInterface
        self._cmd = None
        self._proc = None

    def serverAddress(self):
        return self._server

    def interface(self):
        return self._tapInterface

    def connect(self):
        cmd = self._getCommand()

        # Pretty-print command
        print('Launching OpenVPN with command:')
        print(' '.join(cmd).replace(' --', '\n\t--') + '\n')

        try:
            self._proc = subprocess.Popen(cmd)
        except:
            return False

        return True

    def kill(self):
        if self._proc:
            self._proc.send_signal(signal.SIGINT)

    def _getCommand(self):
        if not self._cmd:
            cmd = self._getCommandTemplate()

            # Process variables
            replace(cmd, '$REMOTE_IP', self._server)
            replace(cmd, '$REMOTE_PORT', str(OPENVPN_PORT))
            replace(cmd, '$TAP_DEVICE', self._tapInterface)
            replace(cmd, '$DHCP_SCRIPT', OpenVPNConfig.getDhcpScript())
            replace(cmd, '$CERTIFICATE_AUTHORITY', OpenVPNConfig.getCertificateAuthority())
            replace(cmd, '$CLIENT_CERTIFICATE', OpenVPNConfig.getClientCertificate())
            replace(cmd, '$CLIENT_KEY', OpenVPNConfig.getClientKey())

            self._cmd = cmd

        return self._cmd

    @staticmethod
    def _getCommandTemplate():
        # Build OpenVPN command (arguments will be added to the list)
        openvpnCmd = ['openvpn']

        # Read client config template
        with open(OpenVPNConfig.getClientConfig(), 'r') as f:
            for line in f.readlines():
                line = line.strip()

                # Skip blank lines
                if not line:
                    continue

                # Skip comments
                if line[0] == '#' or line[0] == ';':
                    continue

                # Command line options are preceded by a double-leading-dash
                line = '--' + line

                for token in line.replace('\t', ' ').split(' '):
                    # Skip empty tokens
                    if not token:
                        continue

                    openvpnCmd.append(token)

        return openvpnCmd

def getGateways():
    gateways = [ ]

    # Scan network interfaces for gateways
    niGateways = netifaces.gateways()
    if netifaces.AF_INET in niGateways:
        for gateway in niGateways[netifaces.AF_INET]:
            ipAddress = gateway[0]
            gateways.append(ipAddress)

    return gateways

def main():
    # Array to hold OpenVPN instances
    instances = []

    # Loop until an OpenVPN tap interface is given an IP address
    ipAddress = None
    interface = None
    while not ipAddress:
        # Connect to discovered gateways
        for gateway in getGateways():
            # Skip gateways that already have an instance trying to connect
            if gateway in [i.serverAddress() for i in instances]:
                continue

            tapInterface = TAP_NAME_PREFIX + str(len(instances))

            client = OpenVPNClient(gateway, tapInterface)
            if client.connect():
                instances.append(client)

        # Wait until an instance gets an IP address
        for client in instances:
            try:
                addresses = netifaces.ifaddresses(client.interface())
            except ValueError:
                pass # Interface name is invalid
            else:
                if netifaces.AF_INET in addresses:
                    for address in addresses[netifaces.AF_INET]:
                        if address['addr'] == '0.0.0.0':
                            continue
                        if address['addr'].startswith('169.254'):
                            continue
                        ipAddress = address['addr']
                        interface = client.interface()
                        break
            if ipAddress:
                break
        time.sleep(1)

    # Kill other instances
    for instance in instances:
        if instance.interface() != interface:
            print('Killing instance for %s' % instance.interface())
            instance.kill()

if __name__ == '__main__':
    main()
