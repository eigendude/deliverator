#!/usr/bin/env python
################################################################################
#
#      Copyright (C) 2016 juztamau5
#      Software License Agreement (MIT License)
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#      The above copyright notice and this permission notice shall be included
#      in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
################################################################################

from deliverator.hardware import HardwareScanner

import rospy

NODE_NAME = 'device_manager'

def main():
    rospy.init_node(NODE_NAME, log_level=rospy.DEBUG)

    devices = []

    rate = rospy.Rate(0.2) # Hz
    while True:
        scannedDevices = HardwareScanner.getDevices()

        oldDevices = [dev for dev in devices        if dev.path() not in [d.path() for d in scannedDevices]]
        newDevices = [dev for dev in scannedDevices if dev.path() not in [d.path() for d in devices]]

        # Spawn nodes for new devices
        for device in newDevices:
            if device.launchNode():
                devices.append(device)

        # Kill nodes of old devices
        for device in oldDevices:
            devices.remove(device)
            device.killNode()

        if rospy.is_shutdown():
            break
        rate.sleep()

    # Clean up
    for device in devices:
        if device.launchNode():
            devices.killNode()

if __name__ == '__main__':
    main()
