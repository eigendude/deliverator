#!/usr/bin/env python
################################################################################
#
#      Copyright (C) 2016 juztamau5
#      Software License Agreement (MIT License)
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#      The above copyright notice and this permission notice shall be included
#      in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
################################################################################

from deliverator.hardware import HardwareScanner

import rospy

import subprocess

NODE_NAME = 'device_manager'

def main():
    rospy.init_node(NODE_NAME, log_level=rospy.DEBUG)

    rate = rospy.Rate(1.0)
    devices = []
    while True:
        oldDevices = devices
        devices = HardwareScanner.getDevices()

        # Spawn nodes for new devices
        for device in devices:
            if device.name() not in [oldDevice.name() for oldDevice in oldDevices]:
                subprocess.Popen(['roslaunch',
                                  device.launchFile(),
                                  'NAMESPACE:=' + rospy.get_namespace(),
                                  'DEVICE:=' + device.path()])

        # TODO: Kill nodes of expired devices
        for oldDevice in oldDevices:
            if oldDevice.name() not in [device.name() for device in devices]:
                pass

        if rospy.is_shutdown():
            break
        rate.sleep()

if __name__ == '__main__':
    main()
